name: build builder containers

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:

env:
  IMAGE_NAME: bcachefs-tools-builder

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare_all_buildx:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_ID:  ${{ steps.setvars.outputs.IMAGE_ID }}
      VERSION:  ${{ steps.setvars.outputs.VERSION }}
    steps:
      -
        name: Prepare container names
        id: setvars
        run: |
          #IMAGE_ID=$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          VERSION=$(date -u +%y%m%d%H%M)
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          echo "::set-output name=IMAGE_ID::$IMAGE_ID"
          echo "::set-output name=VERSION::$VERSION"


  buildx-matrix:
    needs: prepare_all_buildx
    runs-on: ubuntu-latest
    env:
        IMAGE_ID: ${{ needs.prepare_all_buildx.outputs.IMAGE_ID }}
        VERSION: ${{ needs.prepare_all_buildx.outputs.VERSION }}
    strategy:
        matrix:
          platform: [ amd64, arm64, armv7 ]
          include:
            - platform: arm64
              buildxplatform: linux/arm64
              strategy.fail-fast: false
            - platform: amd64
              buildxplatform: linux/amd64
              strategy.fail-fast: true
            - platform: armv7
              buildxplatform: linux/arm/v7
              strategy.fail-fast: false

    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Docker Setup Buildx
      id:   buildx
      uses: docker/setup-buildx-action@v2
    -
        name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
    -
      name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    -
      name: git checkout
      uses: actions/checkout@v2
    -
      name: create dockerfile
      run: |
          BUILDER=builder
          cat << 'ENDDOCKERFILE' > Dockerfile
          ARG IMG=ubuntu:22.04
          FROM $IMG as deb

          ENV DEBIAN_FRONTEND=noninteractive
          RUN apt-get update && apt-get install -y \
                  pkg-config libaio-dev libblkid-dev libkeyutils-dev \
                  liblz4-dev libscrypt-dev libsodium-dev liburcu-dev libzstd-dev \
                  uuid-dev zlib1g-dev valgrind libudev-dev git build-essential \
                  python3 python3-docutils \
                  python3-pytest devscripts debhelper libfuse3-dev python3-pytest-xdist \
                  libclang-dev rustc
                  # && rm -rf /var/lib/apt/lists/*
          WORKDIR /build
          ENDDOCKERFILE
    -
      name: Buildx ${{ matrix.platform }}
      run: |
        #IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
        echo IMAGE_ID=$IMAGE_ID
        VERSION+="-${{ matrix.platform }}"
        echo VERSION=$VERSION
        LONGIMAGENAME="${IMAGE_ID}:${VERSION}"
        SHORTIMAGENAME="${IMAGE_ID}:${{ matrix.platform }}"
        echo LONGIMAGENAME: $LONGIMAGENAME
        docker buildx build \
          --platform ${{ matrix.buildxplatform }} \
          -t $IMAGE_NAME \
          --load \
          --progress plain \
          --label "runnumber=${GITHUB_RUN_ID}" \
          .

        docker tag ${IMAGE_NAME} "${LONGIMAGENAME}"
        docker tag ${IMAGE_NAME} "${SHORTIMAGENAME}"

        docker push "${LONGIMAGENAME}"
        docker push "${SHORTIMAGENAME}"
        echo "::notice title={Created builder image}::{${LONGIMAGENAME}}"
        echo "::notice title={Created builder image}::{${SHORTIMAGENAME}}"
        echo "::set-output name={Created builder image}::{${LONGIMAGENAME}}"

